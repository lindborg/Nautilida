package nautilida.levels {	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import nautilida.players.*;	import nautilida.environments.*;	import nautilida.elements.*;	import nautilida.weapons.*;	import nautilida.points.*;		public class Level extends Element {		public var player:Player;		public var environment:Environment;				public var points:int = 0;		public var pointsTotal:int = 0;						public function Level() {			addEventListener(Event.ADDED_TO_STAGE,onAdded);		}				// EVENTS //				private function onAdded(event:Event):void {			for(var i:uint = 0; numChildren > i; i++) {				var child:DisplayObject = getChildAt(i);				if(child is Point) {					var point:Point = child as Point;					pointsTotal += point.value;				}			}						reset();						addEventListener(Event.REMOVED_FROM_STAGE,onRemoved);			addEventListener(Event.ENTER_FRAME,onEnterFrame);		}		private function onRemoved(event:Event):void {			removeEventListener(Event.REMOVED_FROM_STAGE,onRemoved);			removeEventListener(Event.ENTER_FRAME,onEnterFrame);		}		private function onEnterFrame(event:Event):void {			x += levelOffset/20;			x = Math.min(0,x);			x = Math.max(environmentOffsetWidth*-1,x);						y = ((environmentOffsetHeight*playerMultiplierY)-(environmentOffsetHeight/2))*-1;						background.x = (-(backgroundOffsetWidth/2)-x);			background.y = ((backgroundOffsetHeight*playerMultiplierY)*-1)-y;		}				// SET //				public function achive(achived:int):int {			points += platform.achive(achived);			return points;		}		public function reset():void {			platform.setLevel(this);						if(player == null) {				player = new Player();			}						player.x = stage.stageWidth/2;			player.y = 0;						if(!contains(player)) {				addChild(player);			}		}		public function next():void {			platform.next();		}				// LEVEL OFFSETS/BOUNDS //				public function get playerMultiplierY():Number {			return Math.min(1,Math.max(0,player.y/stage.stageHeight));		}		public function get playerMultiplierCenterY():Number {			return (player.y-(stage.stageHeight/2))/(stage.stageHeight/2);		}		public function get backgroundOffsetWidth():Number {			return background.width-stage.stageWidth;		}		public function get backgroundOffsetHeight():Number {			return background.height-stage.stageHeight;		}		public function get environmentOffsetWidth():Number {			return environment.width-stage.stageWidth;		}		public function get environmentOffsetHeight():Number {			return environment.height-stage.stageHeight;		}		public function get boundLeft():Number {			return 0;		}		public function get boundRight():Number {			return environment.width;		}		public function get boundTop():Number {			return (environmentOffsetHeight/2)*-1;		}		public function get boundBottom():Number {			return stage.stageHeight+(environmentOffsetHeight/2);		}		public function get bounds():Object {			return {				left:boundLeft,				right:boundRight,				top:boundTop,				bottom:boundBottom			};		}		public function get levelOffset():Number {			return (((stage.stageWidth/2)-player.x)-x);		}		public function addWeapon(weapon:Weapon):DisplayObject {			return addChild(weapon);		}		public function addExplosion(explosion:Explosion):DisplayObject {			return addChild(explosion);		}	}}